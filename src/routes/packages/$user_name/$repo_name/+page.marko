import package_database from "../../../../../database/main.json";
import type { Repo } from "../../../../libs/types_important";
import type { Dependency } from "../../../../libs/types_important";
import zon2json from "z2j";
import { fetchReadmeContent } from "../../../../libs/types_important";
$ const repoPromise: Promise<Repo> = new Promise(async (resolve, reject) => {
  const repositories = [...package_database];
  const { user_name, repo_name } = $global.params;
  const repoPath = `${user_name}/${repo_name}`;
  const repository = repositories.find((repo) => repo.full_name === repoPath);

  if (!repository) {
    return reject("/404");
  }

  var zig_version = "unknown";
  const dependencies: Dependency[] | undefined = [];
  if (repository.has_build_zig_zon == 1) {
    const url = `https://raw.githubusercontent.com/${repository.full_name}/master/build.zig.zon`;
    const res = await fetch(url);
    var zonData = await res.text();
    var zonAsJsonData = zon2json(zonData);

    try {
      const json_parsed = JSON.parse(zonAsJsonData); // No need for await here

      if ("minimum_zig_version" in json_parsed)
        zig_version = json_parsed.minimum_zig_version;

      // Check if 'dependencies' exists in the parsed JSON first
      if ("dependencies" in json_parsed) {
        const deps: {
          [name: string]: {
            url: string | undefined;
            path: string | undefined;
            hash: string | undefined;
          };
        } = json_parsed.dependencies;

        // Iterate over the dependencies and handle them
        for (const [name, dep] of Object.entries(deps)) {
          if (dep.url && dep.hash) {
            dependencies.push({
              name,
              source: "remote",
              location: dep.url,
            });
          } else {
            dependencies.push({
              name,
              source: "relative",
              location: dep.path ? dep.path : "",
            });
          }
        }
      }
    } catch (_) {}
  }

  const compressedRepo: Repo = {
    contentIsCorrect: true,
    name: repository.name,
    full_name: repository.full_name,
    readme_content: await fetchReadmeContent(repository),
    created_at: repository.created_at,
    description: repository.description,
    tags_url: repository.tags_url,
    open_issues: repository.open_issues,
    archived: repository.archived ? true : false,
    license: repository.license,
    stargazers_count: repository.stargazers_count,
    forks_count: repository.forks_count,
    watchers_count: repository.watchers_count,
    topics: repository.topics,
    avatar_url: repository.avatar_url,
    dependencies: dependencies,
    size: repository.size,
    fork: repository.fork,
    has_build_zig: repository.has_build_zig,
    has_build_zig_zon: repository.has_build_zig_zon,
    updated_at: repository.updated_at,
  };
  resolve(compressedRepo);
});

await(repoPromise) client-reorder timeout=100000000
  @placeholder
    <!-- Displays while promise is pending -->
    label
      -- Loadingâ€¦
      progress

  @then|repo|
    div.readme
      if(repo.contentIsCorrect)
        h1 -- ${repo.name}
        div.tabs.three
          input#tab-1 type="radio" name="tabgroupB" checked
          label.pseudo.button.toggle for="tab-1" -- Readme
          input#tab-2 type="radio" name="tabgroupB"
          label.pseudo.button.toggle for="tab-2" -- Dependencies
          input#tab-3 type="radio" name="tabgroupB"
          label.pseudo.button.toggle for="tab-3" -- Deeper detials
          div.row
            div.readmeContent
              if(repo.readme_content)
                -- $!{repo.readme_content}
            div
              if(repo.dependencies)
                h1 -- ${repo.dependencies.length} Dependencies
                for|dependency| of=repo.dependencies
                  a class="mine" href=dependency.location
                    p.api_section -- ${dependency.name}
              else
                h1 -- This package doesn&apos;t has any known repositories.
            div

      else
        h1 -- 404! The else part

  @catch|e|
    h1 -- 404! ${e}

style {
  .readme {
    padding: 20px;
    color: white;
  }
  .readmeContent > pre {
    background-color: #282828;
    font-family: monospace;
    font-weight: normal !important;
    padding: 10px;
    font-size: 20px;
    width: fit-content !important;
  }
  code {
    background-color: #282828;
  }
  pre {
    background-color: #282828;
  }
  .readmeContent > pre > code {
    border-radius: 20px;
    font-family: monospace !important;

    background-color: #282828;
    color: rgb(255, 163, 92);
    font-weight: normal !important;
  }
  .readmeContent pre > code * {
    font-weight: normal !important;
    font-family: monospace !important;
  }
  .readmeContent > code * {
    font-weight: normal !important;
    font-family: monospace !important;
  }
  .api_section {
    color: lightblue;
    background-color: #3a3941;
    padding: 10px;
    border-radius: 10px;
  }
  .mine {
    color: lightblue;
  }
}
